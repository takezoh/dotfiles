#!/usr/bin/env python3
# coding: utf-8
import os
import sys
import argparse
import subprocess


def copy_to_clipboard(filepath, linenumber, line):
    p = subprocess.Popen(['clipboard', '-i'], stdin=subprocess.PIPE, shell=False)
    p.communicate(line.strip().encode('utf-8'))
    p.terminate()


BINDINGS = {
    'enter': ('execute', '''less "+{linenumber}" {filepath}'''),
    'ctrl-o': ('execute', '''nvim "+{linenumber}" {filepath}'''),
    'ctrl-v': ('execute-silent', '''code --reuse-window --goto "`wpath -aw {filepath}`:{linenumber}"'''),
    'ctrl-t': ('execute-silent', '''wcmd `wpath -aw ~/.local/misc/vshelper/openfile.vbs` `wpath -aw {filepath}` {linenumber}'''),
    'ctrl-y': ('execute-silent', copy_to_clipboard),
    }

RAW_BINDINGS = {
    #  'ctrl-y': 'execute-silent(echo {} | clipboard -i)',
    }

PROGRAM = os.path.basename(__file__)
PREVIEW = f'{PROGRAM} --preview `tput lines` `uname` {{}}'
SOURCE_HIGHLIGHTER = 'src-highlight.sh'


def make_bindings():
    duplicate_keys = set(BINDINGS.keys()) & set(RAW_BINDINGS.keys())
    if duplicate_keys:
        raise ValueError('duplicate binding keys: {}'.format(duplicate_keys))

    for bind, value in RAW_BINDINGS.items():
        yield '--bind'
        yield f'{bind}:{value}'
    for bind, (func, _) in BINDINGS.items():
        yield '--bind'
        yield f'{bind}:{func}({PROGRAM} --exec {bind} {{}})'


def expands_rg_line(func):
    def _inner(line, **kwargs):
        filepath, linenumber, line = line.split(':', 2)
        return func(filepath=filepath,
                linenumber=linenumber,
                line=line,
                **kwargs)
    return _inner


def run(args):
    rg_args = ['rg',
        '--line-number',
        '--ignore-case'
        ] + args + [
        '.',
        ]

    fzf_args = ['fzf',
        '-e',
        '--multi',
        '--no-sort',
        '--exit-0',
        '--reverse',
        '--prompt={} > '.format(' '.join(args)),
        '--preview', PREVIEW,
        '--preview-window', 'up',
        ] + list(make_bindings())

    try:
        p_rg = subprocess.Popen(rg_args, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, shell=False)
        p_fzf = subprocess.run(fzf_args, stdin=p_rg.stdout, shell=False)
        p_fzf.check_returncode()
    except subprocess.CalledProcessError as e:
        if e.returncode in (
                1,  # exit-0
                130,  # SIGINT
                ):
            sys.exit(e.returncode)
        raise e


@expands_rg_line
def preview(filepath, linenumber, line, window_lines, osname):
    window_lines = int(window_lines)
    if osname.lower() == 'darwin':
        window_lines = window_lines // 2 - 2
    linenumber = int(linenumber) - 1

    p = subprocess.run([SOURCE_HIGHLIGHTER, filepath], stdout=subprocess.PIPE, shell=False)
    p.check_returncode()

    context = p.stdout.decode('utf-8').replace('\r\n', '\n').split('\n')
    contextlines = len(context)
    head_offset = (window_lines - 0) // 2
    tail_offset = window_lines - head_offset
    headline = max(min(linenumber - head_offset, contextlines - window_lines - 1), 0)
    tailline = min(max(linenumber + tail_offset, window_lines                   ), contextlines)

    out = context[headline:tailline]
    out[linenumber - headline] = u'\u001b[38;5;253;48;5;163;01m' + line.rstrip() + u'\u001b[00m'
    print ('\n'.join(out).replace('\t', '  '))


@expands_rg_line
def execute(filepath, linenumber, line, bind):
    _, command = BINDINGS[bind]
    if callable(command):
        command(filepath=filepath, linenumber=linenumber, line=line)
    else:
        command = command.format(filepath=filepath, linenumber=linenumber, line=line)
        p = subprocess.run(command, shell=True)
        p.check_returncode()


def main():
    command = len(sys.argv) > 1 and sys.argv[1] or None
    if command == '--preview':
        preview(window_lines=sys.argv[2], osname=sys.argv[3], line=sys.argv[4])
    elif command == '--exec':
        execute(bind=sys.argv[2], line=sys.argv[3])
    else:
        run(args=sys.argv[1:])


if __name__ == '__main__':
    main()
