#!/usr/bin/env python3
# coding: utf-8
import os
import sys
import shutil
import platform
import subprocess


def copy_to_clipboard(filepath, linenumber, text):
    p = subprocess.Popen(['clipboard', '-i'], stdin=subprocess.PIPE, shell=False)
    p.communicate(text.strip().encode('utf-8'))
    p.terminate()


BINDINGS = {
    'enter': ('execute', '''less "+{linenumber}" {filepath}'''),
    'ctrl-o': ('execute', '''nvim "+{linenumber}" {filepath}'''),
    'ctrl-v': ('execute-silent', '''code --reuse-window --goto "`wpath -aw {filepath}`:{linenumber}"'''),
    'ctrl-t': ('execute-silent', '''open ~/.local/misc/vshelper/openfile.vbs "{filepath}" {linenumber}'''),
    'ctrl-y': ('execute-silent', copy_to_clipboard),
    }

RAW_BINDINGS = {
    #  'ctrl-y': 'execute-silent(echo {} | clipboard -i)',
    }

SOURCE_HIGHLIGHTER = 'src-highlight.sh'
HIGHLIGHT_STYLE = u'\u001b[38;5;253;48;5;163;01m{}\u001b[00m'
FILEPATH_STYLE = u'\u001b[37;40;1;4m> {}\u001b[0m'
SHOW_FILEPATH = True
USE_RANGE_HIGHLIGHT = True
BAT_HIGHLIGHT_THEME = 'zenburn'

RG_ARGS = [
    '--ignore-case',
    ]

FZF_ARGS = [
    '-e',
    '--multi',
    '--no-sort',
    '--exit-0',
    '--reverse',
    ]


class Handler():
    def preview(self):
        out = []
        offset = 0
        window_lines = shutil.get_terminal_size().lines
        if platform.system().lower() == 'darwin':
            window_lines = window_lines // 2 - 2
        linenumber = self.linenumber - 1

        if SHOW_FILEPATH:
            offset += 1
            window_lines -= 1
            out.append(FILEPATH_STYLE.format(self.filepath))

        head = 0
        highlight_args = [SOURCE_HIGHLIGHTER, self.filepath]

        if USE_RANGE_HIGHLIGHT:
            head = max(linenumber - (window_lines - 1), 0)
            tail = linenumber + (window_lines - 1)
            highlight_args = ['bat', '--style=plain', f'--theme={BAT_HIGHLIGHT_THEME}', '--color=always', '--unbuffered', '--line-range', f'{head+1}:{tail+1}', self.filepath]

        p = subprocess.run(highlight_args, stdout=subprocess.PIPE, shell=False)
        p.check_returncode()

        context = p.stdout.decode('utf-8').rstrip().replace('\r\n', '\n').split('\n')
        context_lines = len(context)
        context_offset = max(min(linenumber - window_lines // 2 - head, context_lines - window_lines), 0)
        context[linenumber - head] = HIGHLIGHT_STYLE.format(self.text.rstrip())
        out[offset:] = context[context_offset:context_offset+window_lines]
        print ('\n'.join(out).replace('\t', '  '))

    def bind(self, bind):
        _, command = BINDINGS[bind]
        if callable(command):
            command(filepath=self.filepath, linenumber=self.linenumber, text=self.text)
        else:
            command = command.format(filepath=self.filepath, linenumber=self.linenumber, text=self.text)
            p = subprocess.run(command, shell=True)
            p.check_returncode()

    def __init__(self, rg_line):
        self.filepath, self.linenumber, self.text = rg_line.split(':', 2)
        self.linenumber = int(self.linenumber)

    def execute(self, name, *args):
        getattr(self, name)(*args)


class Program():
    PROGRAM = os.path.abspath(__file__)
    HANDLE_OPTION_NAME = '--g-handle'

    def main(self, args):
        def make_bindings():
            duplicate_keys = set(BINDINGS.keys()) & set(RAW_BINDINGS.keys())
            if duplicate_keys:
                raise ValueError(f'duplicate binding keys: {duplicate_keys}')

            raw_bins = [f'{bind}:{value}' for bind, value in RAW_BINDINGS.items()]
            bins = [f'{bind}:{func}({self.PROGRAM} {self.HANDLE_OPTION_NAME} {{}} bind {bind})' for bind, (func, _) in BINDINGS.items()]
            if raw_bins or bins:
                return ['--bind', ','.join(raw_bins + bins)]
            return []

        rg_args = ['rg',
            '--line-number',
            ] + RG_ARGS + args + [
            '.',
            ]

        fzf_args = ['fzf',
            '--prompt={} > '.format(' '.join(args)),
            '--preview', f'{self.PROGRAM} {self.HANDLE_OPTION_NAME} {{}} preview',
            '--preview-window', 'up',
            ] + FZF_ARGS + make_bindings()

        try:
            p_rg = subprocess.Popen(rg_args, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, shell=False)
            p_fzf = subprocess.run(fzf_args, stdin=p_rg.stdout, shell=False)
            p_fzf.check_returncode()
        except subprocess.CalledProcessError as e:
            if e.returncode in (
                    1,  # exit-0
                    130,  # SIGINT
                    ):
                sys.exit(e.returncode)
            raise e
        finally:
            p_rg.terminate()

    def run(self, args):
        if len(args) > 0 and args[0] == self.HANDLE_OPTION_NAME:
            Handler(args[1]).execute(args[2], *args[3:])
        else:
            self.main(args)


if __name__ == '__main__':
    Program().run(sys.argv[1:])
