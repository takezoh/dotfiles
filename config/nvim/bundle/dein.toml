[[plugins]]
repo = 'Shougo/dein.vim'

# [[plugins]]
# repo = 'vim-scripts/sudo.vim'

[[plugins]]
repo = 'osyo-manga/vim-watchdogs'

# [[plugins]]
# repo = 'sjl/gundo.vim'
# hook_add = '''
	# nnoremap <leader>g :GundoToggle<cr>
# '''

# " NeoBundle 'Shougo/vimshell'
# " NeoBundle 'mattn/zencoding-vim'

# [[plugins]]
# repo = 'kana/vim-fakeclip'

[[plugins]]
repo = 'altercation/vim-colors-solarized'

# filer

# [[plugins]]
# repo = 'scrooloose/nerdtree'
# hook_add = 'source $XDG_CONFIG_HOME/nvim/autoload/plugins/nerdtree.vim'

# [[plugins]]
# repo = 'Shougo/vimfiler'
# hook_add = '''
	# nnoremap <leader>e :VimFilerExplorer<cr>
	# let g:vimfiler_ignore_pattern = '\%(\.pyc\|\.meta\)$'
# '''



[[plugins]]
repo = 'Shougo/unite.vim'
on_cmd = 'Denite'

[[plugins]]
repo = 'Shougo/unite.vim'

[[plugins]]
repo = 'Shougo/unite-outline'
on_cmd = 'Denite'
depends = ['unite.vim', 'denite.nvim']
# NeoBundle 'Shougo/vimproc', {
#       \ 'build' : {
#       \     'windows' : 'make -f make_mingw32.mak',
#       \     'cygwin' : 'make -f make_cygwin.mak',
#       \     'mac' : 'make -f make_mac.mak',
#       \     'unix' : 'make -f make_unix.mak',
#       \    },
#       \ }


[[plugins]]
repo = 'Shougo/denite.nvim'
#on_cmd = ['Denite', 'DeniteCursorWord']
#on_event = 'VimEnter'
if = 'has("nvim")'
hook_add = 'source $XDG_CONFIG_HOME/nvim/autoload/plugins/denite.vim'
hook_post_source = 'source $XDG_CONFIG_HOME/nvim/autoload/plugins/denite_lazy.vim'

[[plugins]]
repo = 'ozelentok/denite-gtags'
#on_cmd = ['Denite', 'DeniteCursorWord']
depends = ['denite.nvim']

#[[plugins]]
#repo = 'Valloric/YouCompleteMe'
#hook_post_update = '''
#cd $XDG_CACHE_HOME/dein/repos/github.com/Valloric/YouCompleteMe
#git submodule update --init --recursive
#./install.py --all
#'''

# [[plugins]]
# repo = 'justmao945/vim-clang'

[[plugins]]
repo = "tbodt/deoplete-tabnine"
build = "./install.sh"

[[plugins]]
repo = "Shougo/deoplete.nvim"
on_i = 1
# on_event = "InsertCharPre"
# hook_source = """
hook_add = """
  let g:deoplete#enable_at_startup = 1
  "let g:deoplete#auto_complete_delay = 1
  let g:deoplete#auto_complete_start_length = 1
  let g:deoplete#enable_camel_case = 0
  let g:deoplete#enable_ignore_case = 0
  let g:deoplete#enable_refresh_always = 0
  let g:deoplete#enable_smart_case = 1
  "let g:deoplete#file#enable_buffer_path = 1
  let g:deoplete#max_list = 10000
  call deoplete#custom#var('file', 'enable_buffer_path', v:true)
  call deoplete#custom#option({
    \ 'auto_complete_delay': 1,
    \ 'smart_case': v:true,
    \ })
  inoremap <expr><tab> pumvisible() ? "\<C-n>" : "\<tab>"
"""
#   set completeopt-=preview
#   " autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif
#"""

# [[plugins]]
# repo = 'Shougo/neoinclude.vim'
# on_ft = ["h", "hpp", "cpp", "cc", "cmake"]
# depends = "deoplete.nvim"

# [[plugins]]
# repo = "zchee/deoplete-clang"
# on_ft = ["h", "hpp", "cpp", "cc", "cmake"]
# depends = "deoplete.nvim"
# #hook_add = """
# #let g:deoplete#sources#clang#libclang_path='/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/libclang.dylib'
# #let g:deoplete#sources#clang#clang_header='/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang'
# #"""
# # hook_add = '''
# # let g:deoplete#sources#clang#libclang_path='/usr/lib/llvm-6.0/lib/libclang-6.0.so'
# # let g:deoplete#sources#clang#clang_header='/usr/lib/clang'
# # '''
# hook_add = '''
# let g:deoplete#sources#clang#libclang_path='/usr/lib/libclang.so.7'
# let g:deoplete#sources#clang#clang_header='/usr/lib/clang'
# '''

# [[plugins]]
# repo = 'tpope/vim-markdown'
[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_ft = ['markdown', 'pandoc.markdown', 'rmd']
build = 'cd app & yarn install'
hook_add = '''
let g:mkdp_auto_start = 1
let g:mkdp_auto_close = 1
let g:mkdp_refresh_slow = 0

" options for markdown render
" mkit: markdown-it options for render
" katex: katex options for math
" uml: markdown-it-plantuml options
" maid: mermaid options
" disable_sync_scroll: if disable sync scroll, default 0
" sync_scroll_type: 'middle', 'top' or 'relative', default value is 'middle'
"   middle: mean the cursor position alway show at the middle of the preview page
"   top: mean the vim top viewport alway show at the top of the preview page
"   relative: mean the cursor position alway show at the relative positon of the preview page
" hide_yaml_meta: if hide yaml metadata, default is 1
" sequence_diagrams: js-sequence-diagrams options
let g:mkdp_preview_options = {
    \ 'mkit': {},
    \ 'katex': {},
    \ 'uml': {},
    \ 'maid': {},
    \ 'disable_sync_scroll': 0,
    \ 'sync_scroll_type': 'middle',
    \ 'hide_yaml_meta': 1,
    \ 'sequence_diagrams': {}
    \ }

" use a custom markdown style must be absolute path
let g:mkdp_markdown_css = ''

" use a custom highlight style must absolute path
let g:mkdp_highlight_css = ''

" use a custom port to start server or random for empty
let g:mkdp_port = ''

" preview page title
" ${name} will be replace with the file name
let g:mkdp_page_title = '「${name}」'
'''
