# - name: retrieve {{ win_libpath }}
#   shell: cmd.exe /d /c echo "{{ win_libpath }}"
#   register: win_libpath

- name: retrieve {{ win_vscode_settings_path }}
  shell: wslpath -u `cmd.exe /d /c echo "{{ win_vscode_settings_path }}"`
  register: wsl_vscode_settings_path

- name: retrieve {{ win_libpath }}
  shell: wslpath -u `cmd.exe /d /c echo "{{ win_libpath }}"`
  register: wsl_libpath

- set_fact:
    wsl_libpath: "{{ wsl_libpath.stdout }}"
    wsl_vscode_settings_path: "{{ wsl_vscode_settings_path.stdout }}"

#- name: make "{{ wsl_libpath }}" directory
#  shell: >
#    mkdir -p '{{ wsl_libpath }}/{bin,opt}'
    # cmd.exe /d /c mkdir '{{ win_libpath }}\bin' || true;
    # cmd.exe /d /c mkdir '{{ win_libpath }}\opt' || true;
    # ln -snf `wslpath -au '{{ win_libpath }}'` '{{ wsl_libpath }}';

- name: make dirs "{{ wsl_libpath }}"
  file:
    path: "{{ wsl_libpath }}/{{ item }}"
    state: directory
  with_items:
    - bin
    - opt

- name: make vscode settings directory
  shell: cmd.exe /d /c mkdir '{{ win_vscode_settings_path }}' || true

# - name: link to "{{ win_vscode_settings_path }}"
#   shell: >
#     #cmd.exe /d /c rmdir /q '{{ win_vscode_settings_path }}\{{ item }}' || true;
#     #cmd.exe /d /c del /q "{{ win_vscode_settings_path }}\{{ item }}" || true;
#     rm -f "{{ wsl_vscode_settings_path }}/{{ item }}"
#     if [ -d "~/.config/vscode/{{ item }}" ]; then
#       cmd.exe /d /c mklink /d "{{ win_vscode_settings_path }}\{{ item }}" "$(wslpath -aw `readlink -f ~/.config/vscode/{{ item }}`)";
#     elif [ -f "~/.config/vscode/{{ item }}" ]; then
#       cmd.exe /d /c mklink "{{ win_vscode_settings_path }}\{{ item }}" "$(wslpath -aw `readlink -f ~/.config/vscode/{{ item }}`)";
#     fi
#   with_items:
#     - "{{ vscode_settings }}"
# 
# - name: link to any path's
#   shell: >
#     #cmd.exe /d /c rmdir /q '{{ item.dest }}' || true;
#     #cmd.exe /d /c del /q '{{ item.dest }}' || true;
#     rm -f "{{ item.dest }}"
#     mkdir -p `dirname "{{ item.dest }}"`
#     if [ -d {{ item.src }} ]; then
#       cmd.exe /d /c mklink /d '{{ item.dest }}' "$(wslpath -aw `readlink -f {{ item.src }}`)";
#     elif [ -f {{ item.src }} ]; then
#       cmd.exe /d /c mklink '{{ item.dest }}' "$(wslpath -aw `readlink -f {{ item.src }}`)";
#     fi
#   with_items:
#     - "{{ wsl_link_files }}"

# - name: get wsl make files
#   shell: for x in `ls {{ makefile_dir }}/wsl`; do x=${x%%.mk}; ! type $x >/dev/null 2>&1 && echo $x || true; done
#   ignore_errors: yes
#   register: wsl_makefiles
# 
# - name: execute wsl make files
#   make:
#     file: "{{ makefile_dir }}/wsl/{{ item }}.mk"
#     chdir: "{{ wsl_libpath }}/opt"
#     params:
#       # BINDIR: "/usr/local/bin"
#       BINDIR: "{{ wsl_libpath }}/bin"
#       ROOT_DIRECTORY: "{{ root_directory }}"
#   with_items:
#     - "{{ wsl_makefiles.stdout_lines }}"
 
- name: execute wsl make files
  make:
    file: "{{ makefile_dir }}/{{ item }}.mk"
    chdir: "{{ wsl_libpath }}/opt"
    params:
      # BINDIR: "/usr/local/bin"
      BINDIR: "{{ wsl_libpath }}/bin"
      ROOT_DIRECTORY: "{{ root_directory }}"
  with_items:
    - "{{ wsl_makefiles }}"



# # 	cat <<EOF > $HOME/.local/platform-generated.gitconfig
# # [core]
# # 	filemode = false
# # EOF
